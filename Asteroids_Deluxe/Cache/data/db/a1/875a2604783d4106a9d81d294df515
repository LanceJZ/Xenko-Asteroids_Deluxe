// Copyright (c) 2014-2017 Silicon Studio Corp. All rights reserved. (https://www.siliconstudio.co.jp)
// See LICENSE.md for full license information.
namespace SiliconStudio.Xenko.Rendering.Lights
{
    /// <summary>
    /// Defines a spot light
    /// </summary>
    shader LightSpot : LightUtil, LightStream, PositionStream4
    {
        struct SpotLightData
        {
            float3 PositionWS;
            float3 DirectionWS;
            float3 AngleOffsetAndInvSquareRadius;
            [Color]
            float3 Color;
        };

        struct SpotLightDataInternal
        {
            float3 PositionWS;
            float3 DirectionWS;
            float3 AngleOffsetAndInvSquareRadius;
            [Color]
            float3 Color;
        };

        void ProcessLight(SpotLightDataInternal light)
        {
            float3 lightVectorNorm;
            float attenuation = ComputeAttenuation(light, streams.PositionWS.xyz, lightVectorNorm);

            streams.lightColor = light.Color * attenuation;
            streams.lightDirectionWS = lightVectorNorm;
        }

        float ComputeAttenuation(SpotLightDataInternal light, float3 position, inout float3 lightVectorNorm)
        {
            float3 lightVector = light.PositionWS - position;
            float lightVectorLength = length(lightVector);
            lightVectorNorm = lightVector / lightVectorLength;

            float3 lightAngleOffsetAndInvSquareRadius = light.AngleOffsetAndInvSquareRadius;
            float2 lightAngleAndOffset = lightAngleOffsetAndInvSquareRadius.xy;
            float lightInvSquareRadius = lightAngleOffsetAndInvSquareRadius.z;

            // TODO: Add support for disk based Directional light
            float3 lightDirection = -light.DirectionWS;

            float attenuation = 1;
            attenuation *= GetDistanceAttenuation(lightVector, lightInvSquareRadius);
            attenuation *= GetAngleAttenuation(lightVectorNorm, lightDirection, lightAngleAndOffset.x, lightAngleAndOffset.y);
            return attenuation;
        }
    };
}
